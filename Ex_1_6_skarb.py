'''
Zadanie 1.6 Skarb
Napisz grƒô tekstowƒÖ polegajƒÖcƒÖ na poszukiwaniu skarbu na dwuwymiarowej planszy o
rozmiarach 10 na 10. Program na poczƒÖtku losuje pozycjƒô skarbu oraz pozycjƒô gracza.
Nastƒôpnie u≈ºytkownik mo≈ºe wprowadzaƒá komendy zmieniajƒÖce po≈Ço≈ºenie postaci o jednƒÖ
pozycjƒô w g√≥rƒô/d√≥≈Ç/lewo/prawo (np zgodnie z konwencjƒÖ WSAD) ‚Äì normalnie za pomocƒÖ input.
Gdy gracz wejdzie na pole, na kt√≥rym kryje siƒô skarb ‚Äì wygrywa.
Gdy wyjdzie poza planszƒô ‚Äì przegrywa.
Po ka≈ºdym ruchu u≈ºytkownik powinien otrzymywaƒá informacjƒô o tym, czy zmierza w dobrym
kierunku. Po znalezieniu skarbu wypisz liczbƒô ruch√≥w wykorzystanych przez u≈ºytkownika na
doj≈õcie do celu.
Dodatkowe utrudnienia, gdy zacznie dzia≈Çaƒá pierwsza wersja:
‚Ä¢ Po wykonaniu wiƒôkszej liczby krok√≥w ni≈º dwukrotno≈õƒá minimalnej liczby krok√≥w na
poczƒÖtku, umie≈õƒá skarb w nowym miejscu (i od nowa zacznij liczyƒá kroki).
‚Ä¢ Z prawdopodobie≈Ñstwem 1/5 nie podawaj graczowi wskaz√≥wki po wykonaniu kroku.
'''

from random import randint


def plansza(pozycja, symbol):
    x, y = pozycja
    linia = [' - ', ' - ', ' - ', ' - ', ' - ', ' - ', ' - ', ' - ', ' - ', ' - ']
    for i in range(11, 1, -1):
        if i != y + 1:
            for znak in linia:
                print(znak, end='')
            print('')
        else:
            linia[x - 1] = symbol
            for znak in linia:
                print(znak, end='')
            linia[x - 1] = ' - '
            print('')


def zmiana_pozycji(pozycja, ruszyl):
    a, b = pozycja
    c, d = ruszyl
    nowa = (a + c, b + d)
    return nowa


def zly_kierunek(poprzednia, aktualna):
    x, y = pozycja_skarbu
    a, b = poprzednia
    c, d = aktualna
    if abs(c - x) > abs(a - x) or abs(d - y) > abs(b - y):
        return True


def wypad_z_planszy(pozycja):
    a, b = pozycja
    if a not in range(1, 11) or b not in range(1, 11):
        return True


pozycja_skarbu = (randint(1, 10), randint(1, 10))
pozycja_gracza = (randint(1, 10), randint(1, 10))

x_s, y_s = pozycja_skarbu
x_g, y_g = pozycja_gracza

droga_minimalna = abs(x_g - x_s) + abs(y_g - y_s)
ilosc_prob = 0

ruchy = {
    'W': (0, 1),
    'S': (0, -1),
    'A': (-1, 0),
    'D': (1, 0),
}
print('\nSKARB')
print('~~~~~\n')
print('Zgadnij gdzie jest skarb ?')
print('W - g√≥ra \nS - d√≥≈Ç \nA - lewo \nD - prawo\nQ - koniec gry')

plansza(pozycja_gracza, ' X ')
print(f'\ntwoja pozycja: {pozycja_gracza}')

while True:
    ruch = (input('ruch: ')).upper()
    if ruch in ruchy:
        if ilosc_prob < 2 * droga_minimalna:
            ilosc_prob += 1
            nowa_pozycja = zmiana_pozycji(pozycja_gracza, ruchy[ruch])
            if nowa_pozycja == pozycja_skarbu:
                print(f'\n·ï¶(„ÉÑ)·ï§ ZWYCIƒòSTWO\ntwoja pozycja: {nowa_pozycja} - dodatr≈Çe≈õ do skarbu w {ilosc_prob} krokach')
                plansza(pozycja_skarbu, ' üíé ')
                break
            elif wypad_z_planszy(nowa_pozycja):
                print(f'\n¬Ø\(¬∞_o)/¬Ø PRZEGRANA\nwypad≈Çe≈õ z planszy')
                break

            if ilosc_prob % 5 != 0:
                if zly_kierunek(pozycja_gracza, nowa_pozycja):
                    plansza(nowa_pozycja, ' X ')
                    print(f'twoja pozycja: {nowa_pozycja} -:-( idziesz w z≈Çym kierunku')
                else:
                    plansza(nowa_pozycja, ' X ')
                    print(f'twoja pozycja: {nowa_pozycja} - :-) jeste≈õ coraz bli≈ºej')
            else:
                print('¬Ø\_(„ÉÑ)_/¬Ø - brak podpowiedzi')

            pozycja_gracza = nowa_pozycja
        else:
            print('zbyt du≈ºa ilo≈õƒá pr√≥b \n¬Ø\_(„ÉÑ)_/¬Ø SKARB trafia w nowe miejsce')
            pozycja_skarbu = (randint(1, 10), randint(1, 10))
            plansza(pozycja_gracza, ' X ')
            x_s, y_s = pozycja_skarbu
            x_g, y_g = pozycja_gracza
            droga_minimalna = abs(x_g - x_s) + abs(y_g - y_s)
            ilosc_prob = 0

    elif ruch == 'Q':
        break
    else:
        print('to nie jest prawid≈Çowy ruch')
